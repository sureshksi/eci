version: '3.9'

services:

  # -------------------
  # Product Service DB
  # -------------------
  product-db:
    image: mysql:9.0
    container_name: product-db
    environment:
      MYSQL_ROOT_PASSWORD: Welcome@1234
      MYSQL_DATABASE: product_service
    volumes:
      - product_mysql_data:/var/lib/mysql
      - ./productservice/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3307:3306"
    networks:
      - backend

  # Product Service App
  product-service:
    build: ./productservice
    container_name: product-service
    depends_on:
      - product-db
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://product-db:3306/product_service
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: Welcome@1234
    ports:
      - "8082:8082"
    networks:
      - backend

  # -------------------
  # Order Service DB
  # -------------------
  order-db:
    image: mysql:9.0
    container_name: order-db
    environment:
      MYSQL_ROOT_PASSWORD: Welcome@1234
      MYSQL_DATABASE: order_service
    volumes:
      - order_mysql_data:/var/lib/mysql
      - ./orderservice/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3308:3306"
    networks:
      - backend

  # Order Service App
  order-service:
    build: ./orderservice
    container_name: order-service
    depends_on:
      - order-db
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://order-db:3306/order_service
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: Welcome@1234
    ports:
      - "8083:8083"
    networks:
      - backend

  # -------------------
  # Inventory Service DB
  # -------------------
  inventory-db:
    image: mysql:9.0
    container_name: inventory-db
    environment:
      MYSQL_ROOT_PASSWORD: Welcome@1234
      MYSQL_DATABASE: inventory_service
    volumes:
      - inventory_mysql_data:/var/lib/mysql
      - ./inventoryservice/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3309:3306"
    networks:
      - backend

  # Inventory Service App
  inventory-service:
    build: ./inventoryservice
    container_name: inventory-service
    depends_on:
      - inventory-db
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://inventory-db:3306/inventory_service
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: Welcome@1234
    ports:
      - "8084:8084"
    networks:
      - backend

  # -------------------
  # Customer Service DB
  # -------------------
  customer-db:
    image: mysql:9.0
    container_name: customer-db
    environment:
      MYSQL_ROOT_PASSWORD: Welcome@1234
      MYSQL_DATABASE: customer_service
    volumes:
      - customer_mysql_data:/var/lib/mysql
      - ./customerservice/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3305:3306"
    networks:
      - backend

  # Customer Service App
  customer-service:
    build: ./customerservice
    container_name: customer-service
    depends_on:
      - customer-db
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://customer-db:3306/customer_service
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: Welcome@1234
    ports:
      - "8081:8081"
    networks:
      - backend


  # -------------------
  # Notification Service
  # -------------------
  notification-service:
    build: ./notificationservice
    container_name: notification-service
    ports:
      - "8085:8085"
    networks:
      - backend
      
  # -------------------
  # API Gateway
  # -------------------
  api-gateway:
    build: ./apigateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - product-service
      - order-service
      - inventory-service
      - customer-service
      - notification-service
    networks:
      - backend

  # -------------------
  # Promethesus
  # -------------------
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - backend  

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "4317:4317"
    networks:
      - backend 
  # -------------------
  # Grafana
  # -------------------
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - 3000:3000
    depends_on:
      - prometheus
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - grafana-storage:/var/lib/grafana
      # optional: pre-provision datasources/dashboards via provisioning/ folder
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - backend 
volumes:
  grafana-storage:
  product_mysql_data:
  order_mysql_data:
  inventory_mysql_data:
  customer_mysql_data:

networks:
  backend:
    driver: bridge
